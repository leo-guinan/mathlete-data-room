{
  "tweet": {
    "edit_info": {
      "initial": {
        "editTweetIds": [
          "1435208900882599936"
        ],
        "editableUntil": "2021-09-07T12:50:41.519Z",
        "editsRemaining": "5",
        "isEditEligible": true
      }
    },
    "retweeted": false,
    "source": "<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android</a>",
    "entities": {
      "hashtags": [],
      "symbols": [],
      "user_mentions": [
        {
          "name": "Benjamin C.E.O. Greeley",
          "screen_name": "benjamingreeley",
          "indices": [
            "0",
            "16"
          ],
          "id_str": "1277959050727239680",
          "id": "1277959050727239680"
        }
      ],
      "urls": []
    },
    "display_text_range": [
      "0",
      "296"
    ],
    "favorite_count": "0",
    "in_reply_to_status_id_str": "1435204395076132873",
    "id_str": "1435208900882599936",
    "in_reply_to_user_id": "1277959050727239680",
    "truncated": false,
    "retweet_count": "0",
    "id": "1435208900882599936",
    "in_reply_to_status_id": "1435204395076132873",
    "created_at": "Tue Sep 07 11:50:41 +0000 2021",
    "favorited": false,
    "full_text": "@benjamingreeley I didn't actually think much about how the async function would behave in a foreach. But what happened is it just returned promises and then executed the next part of the code. Which means I got all sorts of weird behaviors based on which promises finished before the next block.",
    "lang": "en",
    "in_reply_to_screen_name": "benjamingreeley",
    "in_reply_to_user_id_str": "1277959050727239680"
  }
}